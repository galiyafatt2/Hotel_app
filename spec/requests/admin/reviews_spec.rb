# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/admin/reviews', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Admin::Review. As you add validations to Admin::Review, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { name: 'name', email: 'email', review_text: 'review' }
  end

  let(:invalid_attributes) do
    { name: 'name', email: 'email' }
  end

  let(:admin) do
    User.create! email: 'example@mail.ru', password: 'example'
  end

  before do
    login_as(admin)
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Review.create! valid_attributes
      get admin_reviews_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      review = Review.create! valid_attributes
      get admin_review_url(review)
      expect(response).to be_successful
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { name: 'name_change', email: 'email', review_text: 'review' }
      end

      it 'updates the requested admin_review' do
        review = Review.create! valid_attributes
        patch admin_review_url(review), params: { review: new_attributes }
        review.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the admin_reviews' do
        review = Review.create! valid_attributes
        patch admin_review_url(review), params: { review: new_attributes }
        review.reload
        expect(response).to redirect_to(admin_reviews_url)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested admin_review' do
      review = Review.create! valid_attributes
      expect do
        delete admin_review_url(review)
      end.to change(Review, :count).by(-1)
    end

    it 'redirects to the admin_reviews list' do
      review = Review.create! valid_attributes
      delete admin_review_url(review)
      expect(response).to redirect_to(admin_reviews_url)
    end
  end
end
